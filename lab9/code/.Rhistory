phi1*phi2*exp(base*lambda*(s+1)))^2
return (output)
}
t = seq(0, 50)
lambdas = t/100
data = fx(lambdas)
plot(data, type = "l")
specDen = function(x) {
output = 1/((1 - 1.98*cos(6*pi*x) + 9801*cos(12*pi*x))^2)
return (output)
}
data = specDen(lambdas)
plot(data, type = "l", main = "Spectral Density")
x = data
x = data
yAverager = function(x) {
i = 2
output = rep(0, length(x)-2)
while (i <= (length(x)-1) ) {
output[i-1] = (x[i-1] + x[i] +x[i+1])/3
i = i + 1
}
return (output)
}
y = yAverager(x)
plot(y, type = "l", main = "My sim'ed Y data")
sigma2 = data/51
sigma = sqrt(sigma2)
n = 100
t = 0:(n-1)
A = rep(-9999, 51)
B = rep(-9999, 51)
dta = matrix(-9999, 51, n)
for(i in 1:50)
{
A[i] = rnorm(1, 0, sigma[i])
B[i] = rnorm(1, 0, sigma[i])
dta[i,] = A[i]*cos(2*pi*lambdas[i]*t) + B[i]*sin(2*pi*lambdas[i]*t)
}
dt = dta[1,]
for(i in 2:51)
{
dt = dt + dta[i,]
}
plot(dt, type = "l")
acf(dt)
sigma2 = data/51
sigma = sqrt(sigma2)
n = 100
t = 0:(n-1)
A = rep(-9999, 51)
B = rep(-9999, 51)
dta = matrix(-9999, 51, n)
for(i in 1:50)
{
A[i] = rnorm(1, 0, sigma[i])
B[i] = rnorm(1, 0, sigma[i])
dta[i,] = A[i]*cos(2*pi*lambdas[i]*t) + B[i]*sin(2*pi*lambdas[i]*t)
}
dt = dta[1,]
for(i in 2:51)
{
dt = dt + dta[i,]
}
plot(dt, type = "l")
acf(dt)
plot(dt, type = "l")
data = specDen(lambdas)
plot(data, type = "l", main = "Spectral Density")
plot(dt, type = "l")
x = dt
yAverager = function(x) {
i = 2
output = rep(0, length(x)-2)
while (i <= (length(x)-1) ) {
output[i-1] = (x[i-1] + x[i] +x[i+1])/3
i = i + 1
}
return (output)
}
y = yAverager(x)
plot(y, type = "l", main = "My sim'ed Y data")
phi1 = -.5
phi2 = -.7
data = fx(lambdas)
sigma2 = data/51
sigma = sqrt(sigma2)
n = 400
t = 0:(n-1)
A = rep(-9999, 51)
B = rep(-9999, 51)
dta = matrix(-9999, 51, n)
for(i in 1:50)
{
A[i] = rnorm(1, 0, sigma[i])
B[i] = rnorm(1, 0, sigma[i])
dta[i,] = A[i]*cos(2*pi*lambdas[i]*t) + B[i]*sin(2*pi*lambdas[i]*t)
}
dt = dta[1,]
for(i in 2:51)
{
dt = dt + dta[i,]
}
plot(dt, type = "l")
acf(dt)
actualACF = ARMAacf(ar = c(.5,0,0,0,0,0,0,0,0,0,.7,.7*.5), lag.max = 50)
plot(actualACF, type = "h")
acf(dt, lag.max = 50)
plot(actualACF, type = "h")
for(i in 1:51)
{
A[i] = rnorm(1, 0, sigma[i])
B[i] = rnorm(1, 0, sigma[i])
dta[i,] = A[i]*cos(2*pi*lambdas[i]*t) + B[i]*sin(2*pi*lambdas[i]*t)
}
dt = dta[1,]
for(i in 2:51)
{
dt = dt + dta[i,]
}
plot(dt, type = "l")
acf(dt, lag.max = 50)
actualACF = ARMAacf(ar = c(.5,0,0,0,0,0,0,0,0,0,.7,.7*.5), lag.max = 50)
plot(actualACF, type = "h")
sigma2 = data/51
sigma = sqrt(sigma2)
n = 100
t = 0:(n-1)
A = rep(-9999, 51)
B = rep(-9999, 51)
dta = matrix(-9999, 51, n)
for(i in 1:51)
{
A[i] = rnorm(1, 0, sigma[i])
B[i] = rnorm(1, 0, sigma[i])
dta[i,] = A[i]*cos(2*pi*lambdas[i]*t) + B[i]*sin(2*pi*lambdas[i]*t)
}
dt = dta[1,]
for(i in 2:51)
{
dt = dt + dta[i,]
}
plot(dt, type = "l")
complex(0,
1)
complex(1,0)
complex(im=1)
phi1 = -.5
phi2 = -.9
sigma2 = 1
s = 12
base = -2*pi*complex(im=1)
fx = function(lambda) {
output = sigma2/abs(1 - phi1*exp(base*lambda) - phi2*exp(base*lambda*s) -
phi1*phi2*exp(base*lambda*(s+1)))^2
return (output)
}
t = seq(0, 50)
lambdas = t/100
data = fx(lambdas)
plot(data, type = "l")
ptf1 = function(lambda) {
output = sigma2/ abs(1 + .5*exp(-2*pi*complex(im=1)*lambda))^2
return (output)
}
ptf2 = function(lambda) {
output = sigma2/abs(1 + .9*exp(-2*pi*complex(im=1)*lambda*12))^2
}
specDen1 = ptf1(lambdas)
specDen2 = ptf2(lambdas)
plot(specDen1, type = "l")
plot(specDen2, type = "l")
plot(specDen1, type = "l")
plot(specDen2, type = "l")
plot(data, type = "l")
data = fx(lambdas)
plot(data, type = "l")
phi1 = -.5
phi2 = -.9
sigma2 = 1
s = 12
base = -2*pi*complex(im=1)
fx = function(lambda) {
output = sigma2/abs(1 - phi1*exp(base*lambda) - phi2*exp(base*lambda*s) -
phi1*phi2*exp(base*lambda*(s+1)))^2
return (output)
}
t = seq(0, 50)
lambdas = t/100
data = fx(lambdas)
plot(data, type = "l")
ptf1 = function(lambda) {
output = sigma2/ abs(1 + .5*exp(-2*pi*complex(im=1)*lambda))^2
return (output)
}
ptf2 = function(lambda) {
output = sigma2/abs(1 + .9*exp(-2*pi*complex(im=1)*lambda*12))^2
}
specDen1 = ptf1(lambdas)
specDen2 = ptf2(lambdas)
plot(specDen1, type = "l")
plot(specDen2, type = "l")
plot(specDen1, type = "l")
ptf1 = function(lambda) {
output = sigma2/ abs(1 - .5*exp(-2*pi*complex(im=1)*lambda))^2
return (output)
}
specDen1 = ptf1(lambdas)
plot(specDen1, type = "l")
ptf2 = function(lambda) {
output = sigma2/abs(1 - .9*exp(-2*pi*complex(im=1)*lambda*12))^2
}
specDen2 = ptf2(lambdas)
plot(specDen2, type = "l")
phi1 = .5
phi2 = .9
sigma2 = 1
s = 12
base = -2*pi*complex(im=1)
fx = function(lambda) {
output = sigma2/abs(1 - phi1*exp(base*lambda) - phi2*exp(base*lambda*s) -
phi1*phi2*exp(base*lambda*(s+1)))^2
return (output)
}
t = seq(0, 50)
lambdas = t/100
data = fx(lambdas)
plot(data, type = "l")
phi1 = .5
phi2 = .7
data = fx(lambdas)
sigma2 = data/51
sigma = sqrt(sigma2)
n = 400
t = 0:(n-1)
A = rep(-9999, 51)
B = rep(-9999, 51)
dta = matrix(-9999, 51, n)
for(i in 1:51)
{
A[i] = rnorm(1, 0, sigma[i])
B[i] = rnorm(1, 0, sigma[i])
dta[i,] = A[i]*cos(2*pi*lambdas[i]*t) + B[i]*sin(2*pi*lambdas[i]*t)
}
dt = dta[1,]
for(i in 2:51)
{
dt = dt + dta[i,]
}
plot(dt, type = "l")
acf(dt, lag.max = 50)
actualACF = ARMAacf(ar = c(.5,0,0,0,0,0,0,0,0,0,.7,.7*.5), lag.max = 50)
plot(actualACF, type = "h")
acf(dt, lag.max = 50)
phi1 = .5
phi2 = .7
data = fx(lambdas)
sigma2 = data/51
sigma = sqrt(sigma2)
n = 400
t = 0:(n-1)
A = rep(-9999, 51)
B = rep(-9999, 51)
dta = matrix(-9999, 51, n)
for(i in 1:51)
{
A[i] = rnorm(1, 0, sigma[i])
B[i] = rnorm(1, 0, sigma[i])
dta[i,] = A[i]*cos(2*pi*lambdas[i]*t) + B[i]*sin(2*pi*lambdas[i]*t)
}
dt = dta[1,]
for(i in 2:51)
{
dt = dt + dta[i,]
}
plot(dt, type = "l")
acf(dt, lag.max = 50)
actualACF = ARMAacf(ar = c(.5,0,0,0,0,0,0,0,0,0,.7,.7*.5), lag.max = 50)
plot(actualACF, type = "h")
x = dt
yAverager = function(x) {
i = 2
output = rep(0, length(x)-2)
while (i <= (length(x)-1) ) {
output[i-1] = (x[i-1] + x[i] +x[i+1])/3
i = i + 1
}
return (output)
}
y = yAverager(x)
plot(y, type = "l", main = "My sim'ed Y data")
specDen = function(x) {
output = 1/((1 - 1.98*cos(6*pi*x) + 9801*cos(12*pi*x))^2)
return (output)
}
data = specDen(lambdas)
plot(data, type = "l", main = "Spectral Density")
sigma2 = data/51
sigma = sqrt(sigma2)
n = 100
t = 0:(n-1)
A = rep(-9999, 51)
B = rep(-9999, 51)
dta = matrix(-9999, 51, n)
for(i in 1:51)
{
A[i] = rnorm(1, 0, sigma[i])
B[i] = rnorm(1, 0, sigma[i])
dta[i,] = A[i]*cos(2*pi*lambdas[i]*t) + B[i]*sin(2*pi*lambdas[i]*t)
}
dt = dta[1,]
for(i in 2:51)
{
dt = dt + dta[i,]
}
plot(dt, type = "l")
specdenY = function(x) {
output = specDen(x)*abs(1/3*(1 + 2*cos(2*pi*x)))^2
return (output)
}
datay = specdenY(lambdas)
plot(datay, type = "l", main = "Spec. Den. of Y")
x = dt
yAverager = function(x) {
i = 2
output = rep(0, length(x)-2)
while (i <= (length(x)-1) ) {
output[i-1] = (x[i-1] + x[i] +x[i+1])/3
i = i + 1
}
return (output)
}
y = yAverager(x)
plot(y, type = "l", main = "My sim'ed Y data")
getwd()
setwd("Desktop/stat159/stat159-fall2016-hw02/")
setwd("code")
getwd()
data = read.csv("../data/Advertising.csv")
data = data[,2:5]
Tv = data[,1]
Radio = data[,2]
Newspaper = data[,3]
Sales = data[,4]
model = lm(Sales ~ Tv)
pdf(file = "../images/histogram-tv.pdf")
hist(Tv)
dev.off()
png(file = "../images/histogram-tv.png")
hist(Tv)
dev.off()
summary(Tv)
sink("../images/eda-output.txt")
summary(Tv)
summary(Sales)
sink()
sink("../images/eda-output.txt")
"Tv"
summary(Tv)
"Sales"
summary(Sales)
sink()
Sales
summary(Tv)
summary(Sales)
model = lm(Sales ~ Tv)
summary = summary(model)
summary
save(list = c("model", "summary"), file = "regression.RData")
save(list = c("model", "summary"), file = "regression.RData")
save(list = c("model", "summary"), file = "../data/regression.RData")
load(file = "../data/regression.RData")
model
summary
summary(sales)
summary(Sales)
View(data)
summary
install.packages("xtable")
xtable(model)
library(xtable)
xtable(model)
install.packages(c("evaluate", "formatR", "gridExtra", "manipulate", "rmarkdown"))
model
summary
summary
model
summary
?lm
model$effects
model$model
model$terms
summary$df
?summary$df
summary$adj.r.squared
summary$rss
summary$RSS
summary
t2 = xtable(summary, caption = "Model Analytics")
t2 = xtable(summary, caption = "Model Analytics")
library(xtable)
t2 = xtable(summary, caption = "Model Analytics")
t2
print.xtable(t2, type ="latex")
model$df.residual
modelAnalytics = data.frame(Specifiers = c("RSS", "RSE", "R2", "FStat"),
Values = c(RSS, RSE, R2, FStat))
RSS = sum(residuals(model)^2)
RSE = sqrt(RSS/model$df.residual)
R2 = summary$r.squared
FStat = summary$fstatistic
modelAnalytics = data.frame(Specifiers = c("RSS", "RSE", "R2", "FStat"),
Values = c(RSS, RSE, R2, FStat))
t2 = xtable(modelA, caption = "Model Analytics")
t2 = xtable(modelAnalytics, caption = "Model Analytics")
modelAnalytics = data.frame(Specifiers = c("RSS", "RSE", "R2", "FStat"),
Values = c(RSS, RSE, R2, FStat))
modelAnalytics = data.frame(Specifiers = c("", "RSS", "RSE", "R2", "FStat"),
Values = c(RSS, RSE, R2, FStat))
modelAnalytics = data.frame(Specifiers = c("", "", "RSS", "RSE", "R2", "FStat"),
Values = c(RSS, RSE, R2, FStat))
t2 = xtable(modelAnalytics, caption = "Model Analytics")
print.xtable(t2, type ="latex")
c(RSS, RSE, R2, FStat)
FStat.value
FStat$value
FStat[value]
FStat["value"]
options(xtable.comment = F)
RSS = sum(residuals(model)^2)
RSE = sqrt(RSS/model$df.residual)
R2 = summary$r.squared
FStat = summary$fstatistic
modelAnalytics = data.frame(Specifiers = c("", "", "RSS", "RSE", "R2", "FStat"),
Values = c(RSS, RSE, R2, as.numeric(FStat["value"])))
t2 = xtable(modelAnalytics, caption = "Model Analytics")
modelAnalytics = data.frame(Specifiers = c("RSS", "RSE", "R2", "FStat"),
Values = c(RSS, RSE, R2, as.numeric(FStat["value"])))
t2 = xtable(modelAnalytics, caption = "Model Analytics")
print.xtable(t2, type ="latex")
model$residuals
sum(model$residuals^2)
sum((model$residuals)^2)
(model$residuals)^2
model$residuals
-4.66584779^2
(-4.66584779)^2
sum((model$residuals)^2)
/200
sum((model$residuals)^2)/200
Sales - model$fitted.values
sum((Sales - model$fitted.values)^2)
RSS
MSE
MSE = RSS/200
MSE
summary(Sales)
3.26*3.26
model$df.residual
summary
1-0.999984741210938
# prepare data
data = read.csv("../data/Advertising.csv")
data = data[,2:5]
# separate data
Tv = data[,1]
Radio = data[,2]
Newspaper = data[,3]
Sales = data[,4]
# build plots and save
pdf(file = "../images/histogram-tv.pdf")
hist(Tv)
dev.off()
png(file = "../images/histogram-tv.png")
hist(Tv)
dev.off()
pdf(file = "../images/histogram-sales.pdf")
hist(Sales)
dev.off()
png(file = "../images/histogram-sales.png")
hist(Sales)
dev.off()
# make eda-output.txt
sink("../data/eda-output.txt")
"Tv"
summary(Tv)
"Sales"
summary(Sales)
#code for what goes in the file
sink()
# prepare data
data = read.csv("../data/Advertising.csv")
data = data[,2:5]
# separate data
Tv = data[,1]
Radio = data[,2]
Newspaper = data[,3]
Sales = data[,4]
# build model and get summary object
model = lm(Sales ~ Tv)
summary = summary(model)
# save model and summary to regression.RData
save(list = c("model", "summary"), file = "../data/regression.RData")
# make scatterplots
pdf(file = "../images/scatterplot-tv-sales.pdf")
plot(x = Tv, y = Sales, col = "Red", pch = 16, cex = .75)
abline(a = model$coefficients[1], b = model$coefficients[2], col = "Blue")
dev.off()
png(file = "../images/scatterplot-tv-sales.png")
plot(x = Tv, y = Sales, col = "Red", pch = 16, cex = .75)
abline(a = model$coefficients[1], b = model$coefficients[2], col = "Blue")
dev.off()
